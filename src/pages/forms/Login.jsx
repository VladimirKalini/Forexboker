// src/pages/forms/Login.jsx
import React, { useState } from 'react';
import { Eye, EyeOff } from 'lucide-react';
import { Link, useNavigate } from 'react-router-dom';
import '../../App.css';
import { Helmet } from 'react-helmet-async';

export default function Login() {
  const navigate = useNavigate();

  // State-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  const [lang, setLang] = useState('ru');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const isRu = lang === 'ru';

  const toggleLang = () => setLang(l => (l === 'ru' ? 'en' : 'ru'));
  const togglePassword = () => setShowPassword(v => !v);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);
    setLoading(true);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const requestData = {
      email,
      password
    };

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ (Login):', requestData);

    try {
      const response = await fetch(
        'https://forexbroker.com.de/api/v1/login',
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(requestData)
        }
      );

      const result = await response.json();

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (Login):', result);
      console.log('HTTP —Å—Ç–∞—Ç—É—Å:', response.status);

      if (result.status === 'success' && result.data?.redirect_url) {
        console.log('‚úÖ –£–°–ü–ï–•! –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞:', result.data.redirect_url);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º window.location.href –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
        window.location.href = result.data.redirect_url;
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê –≤—Ö–æ–¥–∞');
        // –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        setError(result.detail || result.message || (isRu
          ? '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.'
          : 'Login failed. Check your credentials.'));
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:', err);
      setError(isRu
        ? '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.'
        : 'Server connection error.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
    <Helmet>
        <title>–í—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç | FXBroker</title>
       <meta name="description" content="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É –∫–ª–∏–µ–Ω—Ç–∞ FXBroker. –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º –∏ —Ç–æ—Ä–≥—É–π—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è." />
    </Helmet>
    <div className="login-page">
      <div className="login-card">
        <div className="login-header">
          <span className="logo">üìà FxBroker</span>
          <button className="lang-toggle" onClick={toggleLang}>
            {lang.toUpperCase()}
          </button>
        </div>

        <h2>{isRu ? '–í–æ–π—Ç–∏' : 'Sign in'}</h2>

        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å */}
        {error && <div className="error-msg">{error}</div>}

        <form onSubmit={handleSubmit}>
          <div className="input-group">
            <input
              type="email"
              placeholder="Email"
              value={email}
              onChange={e => setEmail(e.target.value)}
              required
              disabled={loading}
            />
          </div>

          <div className="input-group">
            <input
              type={showPassword ? 'text' : 'password'}
              placeholder={isRu ? '–ü–∞—Ä–æ–ª—å' : 'Password'}
              value={password}
              onChange={e => setPassword(e.target.value)}
              required
              disabled={loading}
            />
            <span className="password-toggle" onClick={togglePassword}>
              {showPassword ? <Eye size={20}/> : <EyeOff size={20}/>}
            </span>
          </div>

          <div className="options">
            <label>
              <input type="checkbox" defaultChecked />
              <span>{isRu ? '–ó–∞–ø–æ–º–Ω–∏—Ç—å' : 'Remember'}</span>
            </label>
            <Link to="/resetpassword" className="forgot-link">
              {isRu ? '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?' : 'Forgot password?'}
            </Link>
          </div>

          <button type="submit" className="btn-submit" disabled={loading}>
            {loading
              ? (isRu ? '–í—Ö–æ–¥...' : 'Signing in...')
              : (isRu ? '–í–æ–π—Ç–∏' : 'Sign in')}
          </button>
        </form>

        <p className="register-text">
          {isRu ? '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?' : "Don't have an account?"}
          <Link to="/register"> {isRu ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : 'Register'}</Link>
        </p>
      </div>
    </div>
    </>
  );
}